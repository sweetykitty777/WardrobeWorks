//
//  ShareAccessViewModel.swift
//  diploma
//
//  Created by Olga on 21.04.2025.
//

import Foundation
import Combine

@MainActor
class ShareAccessViewModel: ObservableObject {
    @Published var sharedAccesses: [SharedAccess] = []
    @Published var errorMessage: String?

    private let wardrobeId: Int

    init(wardrobeId: Int) {
        self.wardrobeId = wardrobeId
        loadSharedAccesses()
    }

    func loadSharedAccesses() {
        WardrobeService.shared.fetchAccessList { [weak self] result in
            DispatchQueue.main.async {
                switch result {
                case .success(let accesses):
                    self?.sharedAccesses = accesses.filter { $0.wardrobeId == self?.wardrobeId }
                case .failure(let error):
                    self?.errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: \(error.localizedDescription)"
                }
            }
        }
    }

    func addSharedAccess(nickname: String, level: AccessLevel) {
        // –ó–¥–µ—Å—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∫–∞–∫-—Ç–æ –Ω–∞–π—Ç–∏ `grantedToUserId` –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        let dummyUserId = findUserIdByNickname(nickname)
        
        // ü™™ –õ–æ–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        let payload = [
            "wardrobeId": wardrobeId,
            "grantedToUserId": dummyUserId,
            "accessType": level.rawValue
        ] as [String : Any]
        
        if let jsonData = try? JSONSerialization.data(withJSONObject: payload, options: .prettyPrinted),
           let jsonString = String(data: jsonData, encoding: .utf8) {
            print("üöÄ Grant access payload:\n\(jsonString)")
        } else {
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å grant access payload")
        }

        // –í—ã–∑–æ–≤ API
        WardrobeService.shared.grantAccess(
            wardrobeId: wardrobeId,
            grantedToUserId: dummyUserId,
            accessType: level.rawValue
        ) { [weak self] result in
            DispatchQueue.main.async {
                switch result {
                case .success:
                    self?.loadSharedAccesses()
                case .failure(let error):
                    self?.errorMessage = "–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞: \(error.localizedDescription)"
                    print("‚ùå –û—à–∏–±–∫–∞ grantAccess: \(error)")
                }
            }
        }
    }

    func removeSharedAccess(at offsets: IndexSet) {
        for index in offsets {
            let access = sharedAccesses[index]
            WardrobeService.shared.revokeAccess(accessId: access.id) { [weak self] result in
                DispatchQueue.main.async {
                    switch result {
                    case .success:
                        self?.sharedAccesses.remove(at: index)
                    case .failure(let error):
                        self?.errorMessage = "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: \(error.localizedDescription)"
                    }
                }
            }
        }
    }

    private func findUserIdByNickname(_ nickname: String) -> Int {
        // TODO: –°–¥–µ–ª–∞–π —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É (–Ω–∏–∫–Ω–µ–π–º—É)
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ —Ä—É—á–∫—É: /user/by-nickname/{nickname}
        // –ü–æ–∫–∞ –≤–µ—Ä–Ω—ë–º –∑–∞–≥–ª—É—à–∫—É
        return 5
    }
}

