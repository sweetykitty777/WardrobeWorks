//
//  AddClothingItemViewModel.swift
//  diploma
//
//  Created by Olga on 02.03.2025.
//

import Foundation
import SwiftUI
import UIKit

class AddClothingItemViewModel: ObservableObject {
    @Published var itemName: String = ""
    @Published var selectedImage: UIImage?
    @Published var showingImagePicker = false
    @Published var category: String = ""
    @Published var brand: String = ""
    @Published var color: String = ""
    @Published var season: String = ""
    @Published var wardrobeName: String = "" // üÜï –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –≥–∞—Ä–¥–µ—Ä–æ–±–∞
    @Published var price: String = ""
    @Published var purchaseDate: Date = Date()
    @Published var note: String = ""
    @Published var wardrobe: Wardrobe?


    let colors = ["–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª—ë–Ω—ã–π", "–ß—ë—Ä–Ω—ã–π", "–ë–µ–ª—ã–π"]
    let seasons = ["–õ–µ—Ç–æ", "–ó–∏–º–∞", "–û—Å–µ–Ω—å", "–í–µ—Å–Ω–∞"]

    func saveClothingItem(wardrobeId: Int, completion: @escaping () -> Void) {
        let request = CreateClothingItemRequest(
            name: itemName,
            price: Int(price) ?? 0,
            typeId: 0,
            colourId: 0,
            seasonId: 0,
            brandId: 0,
            description: note,
            imagePath: ""
        )

        WardrobeService.shared.createClothingItem(wardrobeId: wardrobeId, request: request) { result in
            DispatchQueue.main.async {
                switch result {
                case .success():
                    completion()
                case .failure(let error):
                    print("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—â–∏: \(error)")
                }
            }
        }
    }

}
