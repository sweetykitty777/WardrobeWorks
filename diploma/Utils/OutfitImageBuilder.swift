import Foundation
import UIKit

/// –°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—É—Ç—Ñ–∏—Ç–∞ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∫–∞–∫ PNG
struct OutfitImageBuilder {
    /// –†–µ–Ω–¥–µ—Ä–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–µ—â–µ–π
    static func renderImage(
        from items: [PlacedClothingItem],
        images: [Int: UIImage],
        canvasSize: CGSize,
        completion: @escaping (UIImage?) -> Void
    ) {
        print("üìê –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä ‚Üí items: \(items.count)")

        // –†–∞—Å—á–µ—Ç –≥—Ä–∞–Ω–∏—Ü –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        let padding: CGFloat = 20
        var minX = CGFloat.greatestFiniteMagnitude
        var minY = CGFloat.greatestFiniteMagnitude
        var maxX: CGFloat = 0
        var maxY: CGFloat = 0
        
        for item in items {
            let size = CGSize(width: 100 * item.scale, height: 100 * item.scale)
            let x = item.x - size.width / 2
            let y = item.y - size.height / 2
            minX = min(minX, x)
            minY = min(minY, y)
            maxX = max(maxX, x + size.width)
            maxY = max(maxY, y + size.height)
        }

        // –†–∞–∑–º–µ—Ä –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ö–æ–ª—Å—Ç–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        let fittedWidth = maxX - minX + padding * 2
        let fittedHeight = maxY - minY + padding * 2
        let fittedCanvasSize = CGSize(width: fittedWidth, height: fittedHeight)

        print("üéØ –ù–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å —Ä–µ–Ω–¥–µ—Ä–∞: \(fittedCanvasSize), —Å–º–µ—â–µ–Ω–∏–µ: (\(minX), \(minY))")

        // –§–æ—Ä–º–∞—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞
        let format = UIGraphicsImageRendererFormat()
        format.scale = UIScreen.main.scale
        format.opaque = false  // –≤–∞–∂–Ω–æ: —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å

        let renderer = UIGraphicsImageRenderer(size: fittedCanvasSize, format: format)

        let finalImage = renderer.image { context in
            // –ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–ª–∏–≤–∞–µ–º ‚Äî —Ñ–æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
            
            // –†–∏—Å—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –ø–æ—Ä—è–¥–∫–µ zIndex
            for item in items.sorted(by: { $0.zIndex < $1.zIndex }) {
                guard let image = images[item.clothId] else {
                    print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è clothId \(item.clothId)")
                    continue
                }

                let size = CGSize(width: 100 * item.scale, height: 100 * item.scale)
                let origin = CGPoint(
                    x: item.x - size.width / 2 - minX + padding,
                    y: item.y - size.height / 2 - minY + padding
                )

                context.cgContext.saveGState()
                context.cgContext.translateBy(x: origin.x + size.width / 2, y: origin.y + size.height / 2)
                context.cgContext.rotate(by: CGFloat(item.rotation * Double.pi / 180))
                context.cgContext.translateBy(x: -origin.x - size.width / 2, y: -origin.y - size.height / 2)

                image.draw(in: CGRect(origin: origin, size: size))
                context.cgContext.restoreGState()
            }
        }

        completion(finalImage)
    }

}
